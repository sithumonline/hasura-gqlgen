package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"github.com/sithumonline/hasura-gqlgen/graph/generated"
	"github.com/sithumonline/hasura-gqlgen/graph/model"
)

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movie, error) {
	movie := model.Movie{
		Title: input.Title,
		URL:   input.URL,
	}

	err := r.DB.QueryRow("INSERT INTO movies (title, url) VALUES ($1, $2) RETURNING id", movie.Title, movie.URL).Scan(&movie.ID)
	if err != nil {
		return nil, fmt.Errorf("error inserting new movie: %v", err)
	}

	return &movie, nil
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	var movies []*model.Movie
	var movie model.Movie

	rows, err := r.DB.Query("SELECT * FROM movies")
	if err != nil {
		return nil, fmt.Errorf("error querying movies: %v", err)
	}

	for rows.Next() {
		err := rows.Scan(&movie.ID, &movie.Title, &movie.URL, &movie.ReleaseDate)
		if err != nil {
			return nil, fmt.Errorf("error scanning movies: %v", err)
		}
		movies = append(movies, &movie)
	}

	return movies, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
